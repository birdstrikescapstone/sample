ui <- dashboardPage(skin = "black",
dashboardHeader(title = "Birdstrikes"),
dashboardSidebar(
sidebarMenu(
menuItem("Dashboard", tabName = "Inputs", icon = icon("dashboard")),
selectInput("stocks","Airfields:",
c(airfields)),
dateInput("dates","Date range",value = as.character(Sys.Date())),
menuItem("About", tabName = "Inputs", icon = icon("dashboard"))
)
),
dashboardBody(
leaflet::leafletOutput("map")
)
)
#R User Interface
ui <- dashboardPage(skin = "black",
dashboardHeader(title = "Birdstrikes"),
dashboardSidebar(
sidebarMenu(
menuItem("Dashboard", tabName = "Inputs", icon = icon("dashboard")),
selectInput("stocks","Airfields:",
c(airfields)),
dateInput("dates","Date range",value = as.character(Sys.Date())),
menuItem("About", tabName = "Inputs", icon = icon?("dashboard"))
)
),
dashboardBody(
leaflet::leafletOutput("map")
)
)
#R User Interface
ui <- dashboardPage(skin = "black",
dashboardHeader(title = "Birdstrikes"),
dashboardSidebar(
sidebarMenu(
menuItem("Dashboard", tabName = "Inputs", icon = icon("dashboard")),
selectInput("stocks","Airfields:",
c(airfields)),
dateInput("dates","Date range",value = as.character(Sys.Date())),
menuItem("About", tabName = "Inputs", icon = ?icon("dashboard"))
)
),
dashboardBody(
leaflet::leafletOutput("map")
)
)
#R User Interface
ui <- dashboardPage(skin = "black",
dashboardHeader(title = "Birdstrikes"),
dashboardSidebar(
sidebarMenu(
menuItem("Dashboard", tabName = "Inputs", icon = icon("dashboard")),
selectInput("stocks","Airfields:",
c(airfields)),
dateInput("dates","Date range",value = as.character(Sys.Date())),
menuItem("About", tabName = "Inputs", icon = icon("table"))
)
),
dashboardBody(
leaflet::leafletOutput("map")
)
)
# source("flickr_api.R")
#
data <- readRDS("AIRFIELDS_MASTERv2.RDS")
# source("flickr_api.R")
#
data <- readRDS("AIRFIELDS_MASTERv2.RDS")
runApp()
runApp()
runApp()
data %>%
dplyr::filter(data$`AIRPORT ID`== KDEN)) %>%
summarise(strikes = sum(data$BIRDCOUNT))
data %>%
dplyr::filter(data$`AIRPORT ID`== KDEN)) %>%
summarise(strikes = sum(data$BIRDCOUNT))
data %>%
group_by(data$`AIRPORT ID')) %>%
summarise(strikes = sum(data$BIRDCOUNT))
data %>%
group_by(data$AIRPORT ID)) %>%
summarise(strikes = sum(data$BIRDCOUNT))
library(tidyverse)
data %>%
group_by(`AIRPORT ID`)
filter(`AIRPORT ID`== "KDEN")
data %>%
filter(`AIRPORT ID`== "KDEN") %>%
group_by(`AIRPORT ID`) %>%
summarise(Strikes = sum(STRIKECOUNT))
runApp()
runApp()
#R User Interface
ui <- dashboardPage(skin = "black",
dashboardHeader(title = "Birdstrikes"),
#Sidebar
dashboardSidebar(
sidebarMenu(
menuItem("Pilot Dashboard", tabName = "Inputs", icon = icon("dashboard")),
selectInput("stocks","Airfields:",
c(airfields)),
dateInput("dates","Date range",value = as.character(Sys.Date())),
menuItem("About WTF!", tabName = "Inputs", icon = icon("users"))
)
),
#Body
dashboardBody(
fluidPage(
fluidRow(
column(12,
dataTableOutput('summary')
)
)
),
leaflet::leafletOutput("map")
# tabItems(
#   tabItem("dashboard",
#           fluidRow(
#             valueBoxOutput("rate"),
#             valueBoxOutput("count"),
#             valueBoxOutput("users")
#           ),
#           fluidRow(
#             box(
#               width = 8, status = "info", solidHeader = TRUE,
#               title = "Popularity by package (last 5 min)",
#               bubblesOutput("packagePlot", width = "100%", height = 600)
#             ),
#             box(
#               width = 4, status = "info",
#               title = "Top packages (last 5 min)",
#               tableOutput("packageTable")
#             )
#           )
#   ),
#   tabItem("rawdata",
#           numericInput("maxrows", "Rows to show", 25),
#           verbatimTextOutput("rawtable"),
#           downloadButton("downloadCsv", "Download as CSV")
#   )
)
)
runApp()
# source("flickr_api.R")
#
data <- readRDS("AIRFIELDS_MASTERv2.RDS")
data %>%
group_by(`AIRPORT ID`) %>%
summarise(Strikes = sum(STRIKECOUNT))
data %>%
group_by(`AIRPORT ID`) %>%
summarise(Strikes = sum(STRIKECOUNT))
data %>%
group_by(`AIRPORT ID`) %>%
summarise(Strikes = sum(STRIKECOUNT))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
air <- data.frame(
airfields = c("KDEN",
"KDFW",
"KORD",
"KSMF"),
latitude = c(39.86169815,
32.896801,
41.9786,
38.69540024),
longitude = c(-104.6729965,
-97.038002,
-87.9048,
-121.5910034))
head(air)
air %>% filter(airfields = "KDEN")
air %>% filter(airfields == "KDEN")
lat[,1]
lat< - air %>% filter(airfields == "KDEN")
lat[,1]
lat[[,1]
View(lat[[,1])
view(lat[[,1])
lat[1,2]
lat <- air %>% filter(airfields == "KDEN")
lat[1,2]
lat <- air %>% filter(airfields == "KDEN")
lat
lat <- air %>% filter(airfields == "KDEN")  %>%  lat[1,2]
lat <- air %>% filter(airfields == "KDEN")<-  lat[1,2]
lat <- air %>% filter(airfields == "KDEN")  lat[1,2]
long<-lat[1,3]
coord <- air %>%
filter(airfields == "KDEN")
lat<- coord[1,2]
long<-coord[1,3]
lat
long
runApp()
runApp()
data %>%
group_by(`AIRPORT ID`) %>%
summarise(Strikes = sum(STRIKECOUNT))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
#   ))) %>%
# addHeatmap(
#   lng =  ~ air$longitude,
#   lat =  ~ air$latitude,
#   blur = 20,
#   max = 0.05,
#   radius = 15
# )
library(dplyr)
mymap <- leaflet() %>%
addProviderTiles(providers$OpenStreetMap,
options = providerTileOptions(noWrap = TRUE)) %>%
addMarkers(lng = air$longitude, lat = air$latitude, popup = names(air)) %>%
addCircleMarkers(air$longitude,air$latitude)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
air <- data.frame(
airfields = c("KDEN",
"KDFW",
"KORD",
"KSMF"),
latitude = c(39.86169815,
32.896801,
41.9786,
38.69540024),
longitude = c(-104.6729965,
-97.038002,
-87.9048,
-121.5910034),
strikes = c(2814,
2170,1557,1891))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
intall.packages("htmltools")
install.packages("htmltools")
install.packages("htmltidy")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
hello
runApp()
source('WTF_R_App/app.R')
source('WTF_R_App/app.R')
setwd("G:/My Drive/Github/sample/BirdStrikesWeb")
runApp()
runApp()
runApp()
runApp()
shiny::runApp('WTF_R_App')
source("Functions.R")
source("Functions.R")
runApp('WTF_R_App')
library(libs)
# Creating a vector of packages used within
required.packages <- c("base","jsonlite","leaflet","lubridate","magrittr","padr","plotly","purrr","raster",
"rgdal","rgeos","rvest","selectr","shiny","shinyjs","sp","stringr","urltools","utils",
"xml2","xts","zoo","tidyverse","shinydashboard","shinythemes","shinyWidgets")
# Function to Install and Load R Packages
install.load.packages <- function(required.packages){
required.packages <-
required.packages[!(required.packages %in% installed.packages()[, "Package"])]
if (length(required.packages)){
install.packages(required.packages, repos = 'http://cran.us.r-project.org')
}
for (package.name in required.packages)
{
library(package.name,
character.only = TRUE,
quietly = TRUE)
}
}
# Call the Function
install.load.packages(required.packages)
# Including the packages for use
for (package in required.packages) {
library(package, character.only = TRUE)
}
library(shiny)
runApp(readline("Enter directory of shiny app: "))
runApp('WTF_R_App')
shiny::runApp('WTF_R_App')
###### Libraries
# Creating a vector of packages used within
required.packages <- c("base","jsonlite","leaflet","lubridate","magrittr","padr","plotly","purrr","raster",
"rgdal","rgeos","rvest","selectr","shiny","shinyjs","sp","stringr","urltools","utils",
"xml2","xts","zoo","tidyverse","shinydashboard","shinythemes","shinyWidgets")
# Function to Install and Load R Packages
install.load.packages <- function(required.packages){
required.packages <-
required.packages[!(required.packages %in% installed.packages()[, "Package"])]
if (length(required.packages)){
install.packages(required.packages, repos = 'http://cran.us.r-project.org')
}
for (package.name in required.packages)
{
library(package.name,
character.only = TRUE,
quietly = TRUE)
}
}
# Call the Function
install.load.packages(required.packages)
# Including the packages for use
for (package in required.packages) {
library(package, character.only = TRUE)
}
###### Predefined Values
#Getting the Airfield Dataset
data <- readRDS("AIRFIELDS_MASTERv2.RDS")
#List of Airfields to select in the User Interface
airfields<-c("KDEN - Denver International" = "KDEN",
"KDFW - Dallas Ft Worth International" = "KDFW",
"KORD - Chicago OHare International" =  "KORD",
"KSMF - Sacremento International" = "KSMF")
#Airfields for Long & Lat
air <- data.frame(
airfields = c("KDEN",
"KDFW",
"KORD",
"KSMF"),
latitude = c(39.86169815,
32.896801,
41.9786,
38.69540024),
longitude = c(-104.6729965,
-97.038002,
-87.9048,
-121.5910034),
strikes = c(2814,
2170,1557,1891))
#4 functions
#input from the user (Date and Airfield)
#Create the table of averages accross all of the variables
#what is the week that we are looking at ?
#average table is created  -- API in future
#getinput for the model--- getAverages(input (Airfield Name and Date))
###Loads the table of averages, load the input of user
### Will return the filtered row of averages that are required for the model to run
#runPredict(getAverages(Airfield name and Date))
### Load the model
#Run the model.predict
#return the Risk Level (HML)
#return the risk probability
# avg(week+avg(day))
#
#
# avg(day)
#
#
#Requiring all of the predefined libraries and functions
require("Functions.R")
#Requiring all of the predefined libraries and functions
require("Functions.R")
#Requiring all of the predefined libraries and functions
require("Functions.R")
runApp('WTF_R_App')
runApp('WTF_R_App')
runApp('WTF_R_App')
server <- function(input, output, session) {
d <- reactive({
dist <- switch(
input$search,
default="KDEN",
kden = "KDEN",
kdfw = "KDFW",
kord = "KORD",
ksmf = "KSMF")
})
output$summary <- renderTable({
data %>%
filter(`AIRPORT ID`== input$airfield) %>%
group_by(`AIRPORT ID`) %>%
summarise(STRIKES = sum(STRIKECOUNT)) %>%
arrange(-STRIKES)
})
output$map <- renderLeaflet({
# coord <- air %>%
#   filter(airfields == input$airfield)
# lat<- coord[1,2]
# long<-coord[1,3]
#the opening should show the 4 airfields and a heat map of max to min agg strikes
mymap <- leaflet() %>%
addProviderTiles(providers$OpenStreetMap,
options = providerTileOptions(noWrap = TRUE)) %>%
# addMarkers(lng = air$longitude, lat = air$latitude, popup = names(air)) %>%
addCircleMarkers(air$longitude,air$latitude,
sqrt(air$strikes) * 0.79899) %>%
addPopups(air$longitude,air$latitude,
htmltools::htmlEscape(paste(
paste(air$airfields, sep = " "),
paste("Strikes:", as.character(air$strikes), sep = " "),
sep = ", ")))
mymap
})
# output$ibox <- renderInfoBox({
#   infoBox(
#     "Birds",
#     input$date,
#     icon = icon("earlybirds")
#   )
# })
output$vboxstrikes <-renderValueBox({
t <- data %>%
filter(`AIRPORT ID`== input$airfield) %>%
group_by(`AIRPORT ID`) %>%
summarise(STRIKES = sum(STRIKECOUNT)) %>%
arrange(-STRIKES)
valueBox(
"Historical Strikes",
subtitle = tags$p(t[1,2], style = "font-size: 200%;"),
icon = icon("plane"),
color = "teal")
})
output$vboxrisk <-renderValueBox({
if(input$date == Sys.Date()){
valueBox(
"Risk Level",
input$date,
icon = icon("plane"),
color = "green")
}
else if(input$date > Sys.Date()){
valueBox(
"Risk Level",
input$date,
icon = icon("plane"),
color = "red")
}
else valueBox(
"Risk Level",
input$date,
icon = icon("plane"),
color = "teal")
})
}
runApp('WTF_R_App')
runApp('WTF_R_App')
runApp('WTF_R_App')
shiny::runApp('WTF_R_App')
#Requiring all of the predefined libraries and functions
require("Functions.R")
runApp('WTF_R_App')
#Requiring all of the predefined libraries and functions
require("Functions.R")
#Requiring all of the predefined libraries and functions
require("Functions.R")
#Requiring all of the predefined libraries and functions
source("Functions.R")
runApp('WTF_R_App')
runApp('WTF_R_App')
source("Functions.R")
runApp('WTF_R_App')
runApp('WTF_R_App')
runApp('WTF_R_App')
runApp('WTF_R_App')
runApp('WTF_R_App')
runApp('WTF_R_App')
# Creating a vector of packages used within
required.packages <- c("base","jsonlite","leaflet","lubridate","magrittr","padr","plotly","purrr","raster",
"rgdal","rgeos","rvest","selectr","shiny","shinyjs","sp","stringr","urltools","utils",
"xml2","xts","zoo","tidyverse","shinydashboard","shinythemes","shinyWidgets")
source('G:/My Drive/Github/sample/BirdStrikesWeb/Functions.R')
source('G:/My Drive/Github/sample/BirdStrikesWeb/Functions.R')
runApp('WTF_R_App')
runApp('WTF_R_App')
runApp('WTF_R_App')
runApp('WTF_R_App')
runApp('WTF_R_App')
#Requiring all of the predefined libraries and functions
source("Functions.R")
runApp('WTF_R_App')
setwd("G:/My Drive/Github/sample/BirdStrikesWeb")
runApp('WTF_R_App')
runApp('WTF_R_App')

fluidRow(
shinydashboard::box(id = "second",leaflet::leafletOutput("map")),
align="Left", tags$img(src='images/2 Logo.png', width = "400px")),
# fluidRow(
#   box(tableOutput("summary"),
#   width = 4,
#   background = "light-blue",
#   p("This is content. The background color is set to light-blue")))
# ,fluidRow(
#   align="LEFT", tags$img(src='images/1 Logo.png', width = "300px")
# ),
)
)
runApp()
runApp()
runApp()
runApp()
#---------------------------- Pilot App -----------------------------
#R User Interface
dashboardPage(skin = "blue",
dashboardHeader(title = "Birdstrikes"),
#Sidebar for inputs
dashboardSidebar(
sidebarMenu(
menuItem("Pilot Dashboard", tabName = "Inputs", icon = icon("dashboard")),
selectInput("airfield","Airfields:",
airfields),
dateInput("date","Date:",
value = as.character(Sys.Date()),
min = as.character(Sys.Date()),
max = Sys.Date()+500),
menuItem("About WTF!", tabName = "Inputs", icon = icon("users"))
)
),
#Body
dashboardBody(
fluidRow(
box(uiOutput("tag"),
width = 4,
height = 3),
valueBoxOutput("box_01"),
bsModal("mod","Report a Strike","btn")
),
fluidRow(
infoBoxOutput("vboxrisk"),
valueBoxOutput("vboxstrikes"),
valueBoxOutput('vboxengf')),
# actionButton(inputId='vboxengf', label="Learn More",
#                           icon = icon("bird"),
#                           onclick ="window.open('https://wildlife.faa.gov/add')"))
fluidRow(box(tags$style(type = "text/css", "html, body {width:100%;height:200%}"),
leaflet::leafletOutput("map"),
absolutePanel(id="controls",
style="z-index:500;",
class = "panel panel-default",
draggable = TRUE),
width = 12)
),
# fluidRow(
#   box(tableOutput("summary"),
#   width = 4,
#   background = "light-blue",
#   p("This is content. The background color is set to light-blue")))
# ,fluidRow(
#   align="LEFT", tags$img(src='images/1 Logo.png', width = "300px")
# ),
)
)
runApp()
#---------------------------- Pilot App -----------------------------
#R User Interface
dashboardPage(skin = "blue",
dashboardHeader(title = "Birdstrikes"),
#Sidebar for inputs
dashboardSidebar(
sidebarMenu(
menuItem("Pilot Dashboard", tabName = "Inputs", icon = icon("dashboard")),
selectInput("airfield","Airfields:",
airfields),
dateInput("date","Date:",
value = as.character(Sys.Date()),
min = as.character(Sys.Date()),
max = Sys.Date()+500),
menuItem("About WTF!", tabName = "Inputs", icon = icon("users"))
)
),
#Body
dashboardBody(
fluidRow(
box(uiOutput("tag"),
width = 4,
height = 3),
valueBoxOutput("box_01"),
bsModal("mod","Report a Strike","btn")
),
fluidRow(
infoBoxOutput("vboxrisk"),
valueBoxOutput("vboxstrikes"),
valueBoxOutput('vboxengf')),
# actionButton(inputId='vboxengf', label="Learn More",
#                           icon = icon("bird"),
#                           onclick ="window.open('https://wildlife.faa.gov/add')"))
fluidRow(box(tags$style(type = "text/css", "html, body {width:100%;height:200%}"),
leaflet::leafletOutput("map"),
absolutePanel(id="controls",
style="z-index:500;",
class = "panel panel-default",
draggable = TRUE),
width = 12,
style = "height:200px;")
),
# fluidRow(
#   box(tableOutput("summary"),
#   width = 4,
#   background = "light-blue",
#   p("This is content. The background color is set to light-blue")))
# ,fluidRow(
#   align="LEFT", tags$img(src='images/1 Logo.png', width = "300px")
# ),
)
)
runApp()
runApp()
#---------------------------- Pilot App -----------------------------
#R User Interface
dashboardPage(skin = "blue",
dashboardHeader(title = "Birdstrikes"),
#Sidebar for inputs
dashboardSidebar(
sidebarMenu(
menuItem("Pilot Dashboard", tabName = "Inputs", icon = icon("dashboard")),
selectInput("airfield","Airfields:",
airfields),
dateInput("date","Date:",
value = as.character(Sys.Date()),
min = as.character(Sys.Date()),
max = Sys.Date()+500),
menuItem("About WTF!", tabName = "Inputs", icon = icon("users"))
)
),
#Body
dashboardBody(
fluidRow(),
fluidRow(
infoBoxOutput("vboxrisk"),
valueBoxOutput("vboxstrikes"),
valueBoxOutput('vboxengf')),
# actionButton(inputId='vboxengf', label="Learn More",
#                           icon = icon("bird"),
#                           onclick ="window.open('https://wildlife.faa.gov/add')"))
fluidRow(
# box(tags$style(type = "text/css", "html, body {width:100%;height:200%}"),
#            leaflet::leafletOutput("map"),
#            absolutePanel(id="controls",
#                          style="z-index:500;",
#                          class = "panel panel-default",
#                          draggable = TRUE),
#            width = 12)
column(12,
box(
width = 9,
title = "Map of Airfield:",
status = "primary",
solidHeader = TRUE,
collapsible = FALSE,
height = "100%",
leafletOutput(outputId = "map", width="100%", height = 940, "center")),
)
),
# fluidRow(
#   box(tableOutput("summary"),
#   width = 4,
#   background = "light-blue",
#   p("This is content. The background color is set to light-blue")))
# ,fluidRow(
#   align="LEFT", tags$img(src='images/1 Logo.png', width = "300px")
# ),
)
)
runApp()
runApp()
owm_data <- find_city("Malaga", units = "metric") %>%
owmr_as_tibble()
map <- leaflet() %>% addTiles() %>%
add_weather(
owm_data,
template = "<b>{{name}}</b>, {{temp}}<c2><b0>C",
icon = owm_data$weather_icon
)
map
owm_data <- result %>%
owmr_as_tibble()
map <- leaflet() %>% addTiles() %>%
add_weather(
owm_data,
template = "<b>{{name}}</b>, {{temp}}<c2><b0>C",
icon = owm_data$weather_icon
)
owm_data <- find_city("Malaga", units = "metric") %>%
owmr_as_tibble()
View(owm_data)
owm_data <- owmr::get_forecast(city=states[i], unit = "imperial") %>%
owmr_as_tibble()
result <- owmr::get_forecast(lat = air[1,2], lon = air[1,3], units = "imperial")
owm_data <- owmr::get_forecast(lat = air[1,2], lon = air[1,3], units = "imperial") %>%
owmr_as_tibble()
View(owm)
map <- leaflet() %>% addTiles() %>%
add_weather(
owm_data,
template = "<b>{{name}}</b>, {{temp}}<c2><b0>C",
icon = owm_data$weather_icon
)
owm_data <- owmr::get_forecast(lat = air[1,2], lon = air[1,3], units = "imperial") %>%
owmr_as_tibble()
View(owm_data)
result <- owmr::get_forecast(lat = air[1,2], lon = air[1,3], units = "imperial")
owm_data <- find_city("Malaga", units = "metric") %>%
owmr_as_tibble()map <- leaflet() %>% addTiles() %>%
owm_data <- find_city("Malaga", units = "metric") %>%
owmr_as_tibble()
result <- owmr::get_forecast(lat = air[1,2], lon = air[1,3], units = "imperial") %>%
owmr_as_tibble()
owm_data <- find_city("Malaga", units = "metric") %>%
owmr_as_tibble()
result <- owmr::get_forecast(lat = air[1,2], lon = air[1,3], units = "imperial") %>%
owmr_as_tibble()
View(result)
View(owm_data)
owm_data <- find_city("Denver", units = "metric") %>%
owmr_as_tibble()
map <- leaflet() %>% addTiles() %>%
add_weather(
owm_data,
template = "<b>{{name}}</b>, {{temp}}<c2><b0>C",
icon = owm_data$weather_icon)
map
result <- owmr::get_forecast(lat = air[1,2], lon = air[1,3], units = "imperial") %>%
owmr_as_tibble()
owm_data <- find_city(lat = air[1,2], lng = air[1,3], units = "imperial") %>%
owmr_as_tibble()
owm_data <- find_city("Denver", units = "imperial") %>%
owmr_as_tibble()
owm_data <- find_city("Denver Colorado", units = "imperial") %>%
owmr_as_tibble()
metric
imperial
owm_data <- find_city("Denver", units = "imperial") %>%
owmr_as_tibble()
map <- leaflet() %>% addTiles() %>%
add_weather(
owm_data,
template = "<b>{{name}}</b>, {{temp}}<c2><b0>C",
icon = owm_data$weather_icon)
map
owm_data <- find_city(lat =air[1,2] , lon = air[1,3] , units = "imperial") %>%
owmr_as_tibble()
map <- leaflet() %>% addTiles() %>%
add_weather(
owm_data,
template = "<b>{{name}}</b>, {{temp}}<c2><b0>F",
icon = owm_data$weather_icon)
map
runApp()
shiny::runApp()
runApp()
runApp()
shiny::runApp()
knitr::opts_chunk$set(echo = TRUE)
#---------------------------- Libraries -----------------------------
library(tidyverse)
library(owmr)
library(rebird)
library(mapr)
library(auk)
air <- data.frame(
airfields = c("KDEN",
"KDFW",
"KORD",
"KSMF"),
latitude = c(39.86169815,
32.896801,
41.9786,
38.69540024),
longitude = c(-104.6729965,
-97.038002,
-87.9048,
-121.5910034),
strikes = c(2814,
2170,1557,1891))
coord <- air %>%
filter(airfields == "KDEN")
lat<- coord[1,2]
long<-coord[1,3]
Sys.setenv(OWM_API_KEY = "99f521810d0fef37f59930f36dbb2256")
result <- owmr::get_forecast(lat = air[1,2], lon = air[1,3], units = "imperial") %>%
owmr_as_tibble()
owm_data <- find_city(lat =air[1,2] , lon = air[1,3] , units = "imperial") %>%
owmr_as_tibble()
map <- leaflet() %>% addTiles() %>%
add_weather(
owm_data,
template = "<b>{{name}}</b>, {{temp}}<c2><b0>F",
icon = owm_data$weather_icon)
map
owm_data <- owmr::get_forecast(lat =air[1,2] , lon = air[1,3] , units = "imperial") %>%
owmr_as_tibble()
map <- leaflet() %>% addTiles() %>%
add_weather(
owm_data,
template = "<b>{{name}}</b>, {{temp}}<c2><b0>F",
icon = owm_data$weather_icon)
owm_data <- owmr::get_forecast(lat =air[1,2] , lon = air[1,3] , units = "imperial") %>%
owmr_as_tibble()
owm_data1 <- owmr::get_forecast(lat =air[1,2] , lon = air[1,3] , units = "imperial") %>%
owmr_as_tibble()
owm_data1 <- owmr::find_city(lat =air[1,2] , lon = air[1,3] , units = "imperial") %>%
owmr_as_tibble()
get_forecast
owm_data1 <- owmr::get_forecast(lat =air[1,2] , lon = air[1,3] , units = "imperial") %>%
owmr_as_tibble()
owm_data <- owmr::get_forecast(lat =air[1,2] , lon = air[1,3] , units = "imperial") %>%
owmr_as_tibble()
owm_data1 <- owmr::find_city(lat =air[1,2] , lon = air[1,3] , units = "imperial") %>%
owmr_as_tibble()
View(owm_data)
View(owm_data1)
map <- leaflet() %>% addTiles() %>%
add_weather(
owm_data,
template = "<b>{{name}}</b>, {{temp}}<c2><b0>F",
icon = owm_data$weather_icon)
map <- leaflet() %>% addTiles() %>%
add_weather(
owm_data,
template = "<b>{{weather_main}}</b>, {{temp}}<c2><b0>F",
icon = owm_data$weather_icon)
map <- leaflet() %>%
addTiles() %>%
add_weather(
owm_data,
template = "<b>{{weather_main}}</b>, {{temp}}<c2><b0>F",
icon = owm_data$weather_icon)
owm_data1 <- owmr::get_current_for_group(lat =air[1,2] , lon = air[1,3] , units = "imperial") %>%
owmr_as_tibble()
result <- owmr::get_forecast(lat = air[1,2], lon = air[1,3], units = "imperial") %>%
owmr_as_tibble()
ggplot(result)
dplyr::mutate(dt_txt = lubridate::ymd_hms(dt_txt)
result <- owmr::get_forecast(lat = air[1,2], lon = air[1,3], units = "imperial") %>%
result <- owmr::get_forecast(lat = air[1,2], lon = air[1,3], units = "imperial") %>%
owmr_as_tibble() %>%
dplyr::mutate(dt_txt = ymd_hms(dt_txt))
result
ggplot(result, aes(dt_txt, temp)) +
geom_point(aes(color = cyl)) +
geom_smooth(method ="lm") +
coord_cartesian() +
scale_color_gradient() +
theme_bw()
library(ggplot2)
ggplot(result, aes(dt_txt, temp)) +
geom_point(aes(color = cyl)) +
geom_smooth(method ="lm") +
coord_cartesian() +
scale_color_gradient() +
theme_bw()
ggplot(result, aes(dt_txt, temp)) +
geom_smooth(method ="lm") +
coord_cartesian() +
scale_color_gradient() +
theme_bw()
ggplot(result, aes(dt_txt, temp)) +
geom_line(aes(dt_txt, temp_max))
ggplot(result, aes(dt_txt, temp)) +
geom_line(aes(dt_txt, temp_max)) +
geom_smooth(method ="lm") +
coord_cartesian() +
scale_color_gradient() +
theme_bw()
ggplot(result, aes(dt_txt, temp)) +
geom_line(aes(dt_txt, temp_max)) +
geom_line(aes(dt_txt, temp_min)) +
geom_smooth(method ="lm") +
coord_cartesian() +
scale_color_gradient() +
theme_bw()
ggplot(result, aes(dt_txt, temp)) +
geom_line(aes(dt_txt, temp_max)) +
geom_line(aes(dt_txt, temp_min, color = "red")) +
geom_smooth(method ="lm") +
coord_cartesian() +
scale_color_gradient() +
theme_bw()
ggplot(result, aes(dt_txt, temp)) +
geom_line(aes(dt_txt, temp_max)) +
geom_line(aes(dt_txt, temp_min, "red")) +
geom_smooth(method ="lm") +
coord_cartesian() +
scale_color_gradient() +
theme_bw()
ggplot(result, aes(dt_txt, temp)) +
geom_line(aes(dt_txt, temp_max)) +
geom_line(aes(dt_txt, temp_min, color = red)) +
geom_smooth(method ="lm") +
coord_cartesian() +
scale_color_gradient() +
theme_bw()
ggplot(result, aes(dt_txt, temp)) +
geom_line(aes(dt_txt, temp_max)) +
geom_line(aes(dt_txt, temp_min, color = "red")) +
geom_smooth(method ="lm") +
coord_cartesian() +
scale_color_gradient() +
theme_bw()
ggplot(result, aes(dt_txt, temp)) +
geom_line(aes(dt_txt, temp_max)) +
geom_line(aes(dt_txt, temp_min),color = "red") +
geom_smooth(method ="lm") +
coord_cartesian() +
scale_color_gradient() +
theme_bw()
ggplot(result, aes(dt_txt, temp)) +
geom_line(aes(dt_txt, temp_max)) +
geom_line(aes(dt_txt, temp_min),color = "red") +
geom_smooth(temp,method ="lm") +
coord_cartesian() +
scale_color_gradient() +
theme_bw()
ggplot(result, aes(dt_txt, temp)) +
geom_line(aes(dt_txt, temp)) +
geom_line(aes(dt_txt, temp_min),color = "red") +
geom_smooth(method ="lm") +
coord_cartesian() +
scale_color_gradient() +
theme_bw()
ggplot(result, aes(dt_txt, temp)) +
geom_line(aes(dt_txt, temp)) +
# geom_line(aes(dt_txt, temp_min),color = "red") +
geom_smooth(method ="lm") +
coord_cartesian() +
scale_color_gradient() +
theme_bw()
ggplot(result, aes(dt_txt, temp)) +
#  geom_line(aes(dt_txt, temp)) +
# geom_line(aes(dt_txt, temp_min),color = "red") +
geom_smooth(method ="lm") +
coord_cartesian() +
scale_color_gradient() +
theme_bw()
ggplot(result, aes(dt_txt, temp)) +
#  geom_line(aes(dt_txt, temp)) +
# geom_line(aes(dt_txt, temp_min),color = "red") +
+ geom_ribbon(ymax = temp_min, ymin =temp_max) +
coord_cartesian() +
scale_color_gradient() +
theme_bw()
ggplot(result, aes(dt_txt)) +
#  geom_line(aes(dt_txt, temp)) +
# geom_line(aes(dt_txt, temp_min),color = "red") +
+ geom_ribbon(ymax = temp_min, ymin =temp_max) +
coord_cartesian() +
scale_color_gradient() +
theme_bw()
ggplot(result, aes(temp)) +
#  geom_line(aes(dt_txt, temp)) +
# geom_line(aes(dt_txt, temp_min),color = "red") +
+ geom_ribbon(ymax = temp_min, ymin =temp_max) +
coord_cartesian() +
scale_color_gradient() +
theme_bw()
shiny::runApp()
library(shiny); source('Aloo.R')
source('Aloo.R')
source('Aloo.R')
source('Aloo.R')
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
shiny::runApp('G:/My Drive/Module 1/2. Foundations of Stats using R/1 R/2 InClass/rmsba/nyuclasses')
runApp('G:/My Drive/Module 1/2. Foundations of Stats using R/1 R/2 InClass/rmsba/nyuclasses')
install.packages("ggpubr")
runApp('G:/My Drive/Module 1/2. Foundations of Stats using R/1 R/2 InClass/rmsba/nyuclasses')
install.packages("ggiraph")
runApp('G:/My Drive/Module 1/2. Foundations of Stats using R/1 R/2 InClass/rmsba/nyuclasses')
runApp('G:/My Drive/Module 1/2. Foundations of Stats using R/1 R/2 InClass/rmsba/nyuclasses')
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
